{
	"info": {
		"_postman_id": "31c51100-7ef7-49fd-833f-d2b9630ca11d",
		"name": "MPS",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20544419"
	},
	"item": [
		{
			"name": "Certs",
			"item": [
				{
					"name": "Get MPS Root Cert for CIRA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.text()).to.contain(\"-----BEGIN CERTIFICATE-----\")\r",
									"    pm.expect(pm.response.text()).to.contain(\"-----END CERTIFICATE-----\")\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/ciracert",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"ciracert"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Devices",
			"item": [
				{
					"name": "All Devices",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Result length should be 0\", function () {\r",
									"   var jsonData = pm.response.json();\r",
									"   pm.expect(jsonData.length).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/devices",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"devices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Device Stats",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Expect to have 3 properties\",function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.totalCount).to.be.equal(0)\r",
									"    pm.expect(jsonData.connectedCount).to.be.equal(0)\r",
									"    pm.expect(jsonData.disconnectedCount).to.be.equal(0)\r",
									"    \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/devices/stats",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"devices",
								"stats"
							]
						}
					},
					"response": []
				},
				{
					"name": "DISTINCT tags when no devices",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Expect to have two tags\",function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.be.equal(0)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/devices/tags",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"devices",
								"tags"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Device with invalid GUID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Expect to return device info\",function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors[0].value).to.be.equal(\"143e4567-e89b-12d3-a456-426614174\")\r",
									"    pm.expect(jsonData.errors[0].msg).to.be.equal(\"Invalid value\")\r",
									"    pm.expect(jsonData.errors[0].param).to.be.equal(\"guid\")  \r",
									"    pm.expect(jsonData.errors[0].location).to.be.equal(\"body\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"guid\": \"143e4567-e89b-12d3-a456-426614174\",\r\n    \"hostname\": \"hostname\",\r\n    \"tags\": []\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/devices",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"devices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Device with tags as string",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Expect an error with wrong device guid format\",function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors[0].value).to.be.equal(\"test\")\r",
									"    pm.expect(jsonData.errors[0].msg).to.be.equal(\"tags should be an array of strings\")\r",
									"    pm.expect(jsonData.errors[0].param).to.be.equal(\"tags\")  \r",
									"    pm.expect(jsonData.errors[0].location).to.be.equal(\"body\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"guid\": \"d12428be-9fa1-4226-9784-54b2038beab6\",\r\n    \"hostname\": \"hostname\",\r\n    \"tags\": \"test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/devices",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"devices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Device",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Expect to return device info\",function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.guid).to.be.equal(\"143e4567-e89b-12d3-a456-426614174000\");\r",
									"    pm.expect(jsonData.hostname).to.be.equal(\"hostname\");\r",
									"    pm.expect(jsonData.tags.length).to.be.equal(0);\r",
									"    pm.expect(jsonData.mpsInstance).to.be.equal(null);\r",
									"    pm.expect(jsonData.connectionStatus).to.be.equal(false);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"guid\": \"143e4567-e89b-12d3-a456-426614174000\",\r\n    \"hostname\": \"hostname\",\r\n    \"tags\": [],\r\n    \"mpsusername\": \"admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/devices",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"devices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Device by GUID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Expect to return device info\",function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.guid).to.be.equal(\"143e4567-e89b-12d3-a456-426614174000\")\r",
									"    pm.expect(jsonData.hostname).to.be.equal(\"hostname\")\r",
									"    pm.expect(jsonData.tags.length).to.be.equal(0)  \r",
									"    pm.expect(jsonData.mpsInstance).to.be.equal(null)\r",
									"    pm.expect(jsonData.connectionStatus).to.be.equal(false)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/devices/143e4567-e89b-12d3-a456-426614174000",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"devices",
								"143e4567-e89b-12d3-a456-426614174000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Device with an invalid GUID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Expect an error with wrong device guid format\",function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors[0].value).to.be.equal(\"143e4567-e89b-12d3-a456-426614174\")\r",
									"    pm.expect(jsonData.errors[0].msg).to.be.equal(\"Invalid value\")\r",
									"    pm.expect(jsonData.errors[0].param).to.be.equal(\"guid\")  \r",
									"    pm.expect(jsonData.errors[0].location).to.be.equal(\"params\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/devices/143e4567-e89b-12d3-a456-426614174",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"devices",
								"143e4567-e89b-12d3-a456-426614174"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Device hostname",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Expect to return device info\",function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.guid).to.be.equal(\"143e4567-e89b-12d3-a456-426614174000\")\r",
									"    pm.expect(jsonData.hostname).to.be.equal(\"DESKTOP-2T73VQK\")\r",
									"    pm.expect(jsonData.tags.length).to.be.equal(1)  \r",
									"    pm.expect(jsonData.mpsInstance).to.be.equal(null)\r",
									"    pm.expect(jsonData.connectionStatus).to.be.equal(false)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"guid\": \"143e4567-e89b-12d3-a456-426614174000\",\r\n        \"hostname\": \"DESKTOP-2T73VQK\",\r\n        \"tags\": [\"acm\"]\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/devices",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"devices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Device not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Expect to return device info\",function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.equal(\"NOT FOUND\")\r",
									"    pm.expect(jsonData.message).to.be.equal(\"Device ID 143e4567-e89b-12d3-a456-426614174001 not found\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"guid\": \"143e4567-e89b-12d3-a456-426614174001\",\r\n        \"hostname\": \"hostname\",\r\n        \"tags\": [\"acm\"]\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/devices",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"devices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Device tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Expect to return device info\",function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.guid).to.be.equal(\"143e4567-e89b-12d3-a456-426614174000\")\r",
									"    pm.expect(jsonData.hostname).to.be.equal(\"hostname\")\r",
									"    pm.expect(jsonData.tags.length).to.be.equal(1)  \r",
									"    pm.expect(jsonData.mpsInstance).to.be.equal(null)\r",
									"    pm.expect(jsonData.connectionStatus).to.be.equal(false)\r",
									"})\r",
									"pm.test(\"Expect tag value to be acm\",function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.tags.length).to.be.equal(1)  \r",
									"    pm.expect(jsonData.tags[0]).to.be.equal(\"acm\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"guid\": \"143e4567-e89b-12d3-a456-426614174000\",\r\n        \"hostname\": \"hostname\",\r\n        \"tags\": [\"acm\"]\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/devices",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"devices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Device",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Expect to return device info\",function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.guid).to.be.equal(\"d12428be-9fa1-4226-9784-54b2038beab6\")\r",
									"    pm.expect(jsonData.hostname).to.be.equal(\"hostname\")\r",
									"    pm.expect(jsonData.tags.length).to.be.equal(1)  \r",
									"    pm.expect(jsonData.mpsInstance).to.be.equal(null)\r",
									"    pm.expect(jsonData.connectionStatus).to.be.equal(false)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"guid\": \"d12428be-9fa1-4226-9784-54b2038beab6\",\r\n    \"hostname\": \"hostname\",\r\n    \"tags\": [\"ccm\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/devices",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"devices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Device redirection token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRJZCI6IiIsImlzcyI6IjlFbVJKVGJJaUliNGJJZVNzbWdjV0lqclI2SHlFVHFjIiwiZXhwIjoxNjUyNTU3MTYwfQ.ZkmzU-uWPMQbCRiSllCWyM7_QxvKMgIdhxxEkyipIVc",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/authorize/redirection/d12428be-9fa1-4226-9784-54b2038beab6",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"authorize",
								"redirection",
								"d12428be-9fa1-4226-9784-54b2038beab6"
							]
						}
					},
					"response": []
				},
				{
					"name": "DISTINCT tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Expect to have two tags\",function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.be.equal(2)\r",
									"    pm.expect(jsonData).contains(\"acm\")\r",
									"    pm.expect(jsonData).contains(\"ccm\")\r",
									"    \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/devices/tags",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"devices",
								"tags"
							]
						}
					},
					"response": []
				},
				{
					"name": "All Devices by tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Should bring all devices with tag acm\", function () {\r",
									"   var jsonData = pm.response.json();\r",
									"   pm.expect(jsonData[0].guid).to.eql(\"143e4567-e89b-12d3-a456-426614174000\");\r",
									"   pm.expect(jsonData[0].hostname).to.eql(\"hostname\");\r",
									"   pm.expect(jsonData[0].tags.length).to.eql(1);\r",
									"    pm.expect(jsonData[0].tags[0]).to.eql(\"acm\");\r",
									"   pm.expect(jsonData[0].mpsInstance).to.eql(null);\r",
									"   pm.expect(jsonData[0].connectionStatus).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/devices?tags=acm",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"devices"
							],
							"query": [
								{
									"key": "tags",
									"value": "acm"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All Devices by status (Connected)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Should bring all devices with tag acm\", function () {\r",
									"   var jsonData = pm.response.json();\r",
									"   pm.expect(jsonData.length).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/devices?status=1",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"devices"
							],
							"query": [
								{
									"key": "status",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All Devices by status (Disconnected)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Should bring all devices with tag acm\", function () {\r",
									"   var jsonData = pm.response.json();\r",
									"   pm.expect(jsonData[0].guid).to.eql(\"143e4567-e89b-12d3-a456-426614174000\");\r",
									"   pm.expect(jsonData[0].hostname).to.eql(\"hostname\");\r",
									"   pm.expect(jsonData[0].tags.length).to.eql(1);\r",
									"   pm.expect(jsonData[0].tags[0]).to.eql(\"acm\");\r",
									"   pm.expect(jsonData[0].mpsInstance).to.eql(null);\r",
									"   pm.expect(jsonData[0].connectionStatus).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/devices?status=0",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"devices"
							],
							"query": [
								{
									"key": "status",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All Devices by hostname",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Should bring all devices with tag acm\", function () {\r",
									"   var jsonData = pm.response.json();\r",
									"   pm.expect(jsonData[0].guid).to.eql(\"143e4567-e89b-12d3-a456-426614174000\");\r",
									"   pm.expect(jsonData[0].hostname).to.eql(\"hostname\");\r",
									"   pm.expect(jsonData[0].tags.length).to.eql(1);\r",
									"   pm.expect(jsonData[0].tags[0]).to.eql(\"acm\");\r",
									"   pm.expect(jsonData[0].mpsInstance).to.eql(null);\r",
									"   pm.expect(jsonData[0].connectionStatus).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/devices?hostname=hostname",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"devices"
							],
							"query": [
								{
									"key": "hostname",
									"value": "hostname"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All Devices with count set to true",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Result length should be 0\", function () {\r",
									"   var jsonData = pm.response.json();\r",
									"   pm.expect(jsonData.data.length).to.eql(2);\r",
									"   pm.expect(jsonData.totalCount).to.eql(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/devices?$top=10&$skip=0&$count=true",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"devices"
							],
							"query": [
								{
									"key": "$top",
									"value": "10"
								},
								{
									"key": "$skip",
									"value": "0"
								},
								{
									"key": "$count",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All Devices with count set to false",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Result length should be 0\", function () {\r",
									"   var jsonData = pm.response.json();\r",
									"   pm.expect(jsonData.length).to.eql(2);\r",
									"   pm.expect(jsonData.totalCount).to.be.undefined;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/devices?$top=10&$skip=0&$count=false",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"devices"
							],
							"query": [
								{
									"key": "$top",
									"value": "10"
								},
								{
									"key": "$skip",
									"value": "0"
								},
								{
									"key": "$count",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Device with an invalid GUID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Expect an error for invalid guid\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors[0].value).to.be.equal(\"143e4567-e89b-12d3-a456-426614174\")\r",
									"    pm.expect(jsonData.errors[0].msg).to.be.equal(\"Invalid value\")\r",
									"    pm.expect(jsonData.errors[0].param).to.be.equal(\"guid\")  \r",
									"    pm.expect(jsonData.errors[0].location).to.be.equal(\"params\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/devices/143e4567-e89b-12d3-a456-426614174",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"devices",
								"143e4567-e89b-12d3-a456-426614174"
							]
						}
					},
					"response": []
				},
				{
					"name": "Device not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Expect an error when there is no device\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.equal(\"NOT FOUND\")\r",
									"    pm.expect(jsonData.message).to.be.equal(\"Device ID 143e4567-e89b-12d3-a456-426614174002 not found\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/devices/143e4567-e89b-12d3-a456-426614174002",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"devices",
								"143e4567-e89b-12d3-a456-426614174002"
							]
						}
					},
					"response": []
				},
				{
					"name": "Device",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/devices/143e4567-e89b-12d3-a456-426614174000",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"devices",
								"143e4567-e89b-12d3-a456-426614174000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Disconnect CIRA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Device should not be found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eq(\"Device not found/connected. Please connect again using CIRA.\")\r",
									"    pm.expect(jsonData.errorDescription).to.eq(\"guid : d12428be-9fa1-4226-9784-54b2038beab6\")\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/devices/disconnect/d12428be-9fa1-4226-9784-54b2038beab6",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"devices",
								"disconnect",
								"d12428be-9fa1-4226-9784-54b2038beab6"
							]
						}
					},
					"response": []
				},
				{
					"name": "Device",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/devices/d12428be-9fa1-4226-9784-54b2038beab6",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"devices",
								"d12428be-9fa1-4226-9784-54b2038beab6"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "AMT",
			"item": [
				{
					"name": "Get Audit Log",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Device should not be found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eq(\"Device not found/connected. Please connect again using CIRA.\")\r",
									"    pm.expect(jsonData.errorDescription).to.eq(\"guid : 1\")\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/amt/log/audit/1?startIndex=0",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"amt",
								"log",
								"audit",
								"1"
							],
							"query": [
								{
									"key": "startIndex",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Event Log",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Device should not be found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eq(\"Device not found/connected. Please connect again using CIRA.\")\r",
									"    pm.expect(jsonData.errorDescription).to.eq(\"guid : 1\")\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/amt/log/event/1",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"amt",
								"log",
								"event",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request user consent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Device should not be found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eq(\"Device not found/connected. Please connect again using CIRA.\")\r",
									"    pm.expect(jsonData.errorDescription).to.eq(\"guid : 1\")\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiI5RW1SSlRiSWlJYjRiSWVTc21nY1dJanJSNkh5RVRxYyIsImV4cCI6MTYyOTU2NjYxMn0.T-RplTGb8wOVcjRcfvS1t-ktUrolErl4IY4I7ih5MKg",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/amt/userConsentCode/1",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"amt",
								"userConsentCode",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send user consent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Device should not be found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eq(\"Device not found/connected. Please connect again using CIRA.\")\r",
									"    pm.expect(jsonData.errorDescription).to.eq(\"guid : 1\")\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiI5RW1SSlRiSWlJYjRiSWVTc21nY1dJanJSNkh5RVRxYyIsImV4cCI6MTYyOTU2NjYxMn0.T-RplTGb8wOVcjRcfvS1t-ktUrolErl4IY4I7ih5MKg",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"consentCode\": 556249\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/amt/userConsentCode/1",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"amt",
								"userConsentCode",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cancel user consent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Device should not be found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eq(\"Device not found/connected. Please connect again using CIRA.\")\r",
									"    pm.expect(jsonData.errorDescription).to.eq(\"guid : 1\")\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiI5RW1SSlRiSWlJYjRiSWVTc21nY1dJanJSNkh5RVRxYyIsImV4cCI6MTYyOTU2NjYxMn0.T-RplTGb8wOVcjRcfvS1t-ktUrolErl4IY4I7ih5MKg",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/amt/userConsentCode/cancel/1",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"amt",
								"userConsentCode",
								"cancel",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Hardware Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Device should not be found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eq(\"Device not found/connected. Please connect again using CIRA.\")\r",
									"    pm.expect(jsonData.errorDescription).to.eq(\"guid : 1\")\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/amt/hardwareInfo/1",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"amt",
								"hardwareInfo",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get General Settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Device should not be found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eq(\"Device not found/connected. Please connect again using CIRA.\")\r",
									"    pm.expect(jsonData.errorDescription).to.eq(\"guid : 1\")\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/amt/generalSettings/1",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"amt",
								"generalSettings",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Power Capabilities",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Device should not be found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eq(\"Device not found/connected. Please connect again using CIRA.\")\r",
									"    pm.expect(jsonData.errorDescription).to.eq(\"guid : 1\")\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/amt/power/capabilities/1",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"amt",
								"power",
								"capabilities",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Power State",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Device should not be found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eq(\"Device not found/connected. Please connect again using CIRA.\")\r",
									"    pm.expect(jsonData.errorDescription).to.eq(\"guid : 1\")\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/amt/power/state/1",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"amt",
								"power",
								"state",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Power Action",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Device should not be found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eq(\"Device not found/connected. Please connect again using CIRA.\")\r",
									"    pm.expect(jsonData.errorDescription).to.eq(\"guid : 1\")\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"action\": 8,\r\n    \"useSOL\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/amt/power/action/1",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"amt",
								"power",
								"action",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Advanced Power Action",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Device should not be found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eq(\"Device not found/connected. Please connect again using CIRA.\")\r",
									"    pm.expect(jsonData.errorDescription).to.eq(\"guid : 1\")\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"action\": 100,\r\n    \"useSOL\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/amt/power/bootoptions/1",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"amt",
								"power",
								"bootoptions",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get AMT Features",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Device should not be found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eq(\"Device not found/connected. Please connect again using CIRA.\")\r",
									"    pm.expect(jsonData.errorDescription).to.eq(\"guid : 1\")\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/amt/features/1",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"amt",
								"features",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set AMT Features",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Device should not be found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eq(\"Device not found/connected. Please connect again using CIRA.\")\r",
									"    pm.expect(jsonData.errorDescription).to.eq(\"guid : 1\")\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userConsent\": \"none\",\r\n    \"enableSOL\": \"false\",\r\n    \"enableIDER\": \"false\",\r\n    \"enableKVM\": \"false\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/amt/features/1",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"amt",
								"features",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Version",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Device should not be found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eq(\"Device not found/connected. Please connect again using CIRA.\")\r",
									"    pm.expect(jsonData.errorDescription).to.eq(\"guid : 1\")\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/amt/version/1",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"amt",
								"version",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deactivate device",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Device should not be found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eq(\"Device not found/connected. Please connect again using CIRA.\")\r",
									"    pm.expect(jsonData.errorDescription).to.eq(\"guid : 1\")\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/amt/deactivate/1",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"amt",
								"deactivate",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Authorize",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body should have JWT Token\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.token).to.be.not.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\":\"standalone\",\r\n    \"password\":\"G@ppm0ym\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/authorize",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"authorize"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login without username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"request should fail without username\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors[0].msg).to.be.eql(\"User name is required\");\r",
									"    pm.expect(jsonData.errors[0].param).to.be.eql(\"username\");\r",
									"    pm.expect(jsonData.errors[0].location).to.be.eql(\"body\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\":\"G@ppm0ym\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/authorize",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"authorize"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login without password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"request should fail without password\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors[0].msg).to.be.eql(\"Password is required\");\r",
									"    pm.expect(jsonData.errors[0].param).to.be.eql(\"password\");\r",
									"    pm.expect(jsonData.errors[0].location).to.be.eql(\"body\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\":\"standalone\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/authorize",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"authorize"
							]
						}
					},
					"response": []
				},
				{
					"name": "Device redirection token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"request should fail without username\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors[0].msg).to.be.eql(\"Invalid value\");\r",
									"    pm.expect(jsonData.errors[0].param).to.be.eql(\"guid\");\r",
									"    pm.expect(jsonData.errors[0].location).to.be.eql(\"params\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/authorize/redirection/1",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"authorize",
								"redirection",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get Health",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {    \r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Version request should succeed\", function () {\r",
							"    var result = pm.response.json();\r",
							"    pm.expect(result.db.status).to.eql(\"OK\")\r",
							"    pm.expect(result.secretStore.status.initialized).to.eql(true)\r",
							"    pm.expect(result.secretStore.status.sealed).to.eql(false)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRJZCI6IiIsImlzcyI6IjlFbVJKVGJJaUliNGJJZVNzbWdjV0lqclI2SHlFVHFjIiwiZXhwIjoxNjM2NTg1OTU5fQ.avy8aQdpMZoos-q63qTPObbR3iFiWuod6pjoElNRUu0",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{host}}/api/v1/health",
					"protocol": "{{protocol}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"health"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Version",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {    \r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Version request should succeed\", function () {\r",
							"    var result = pm.response.json();\r",
							"    pm.expect(result.serviceVersion).to.exist\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRJZCI6IiIsImlzcyI6IjlFbVJKVGJJaUliNGJJZVNzbWdjV0lqclI2SHlFVHFjIiwiZGV2aWNlSWQiOiIqIiwiZXhwIjoxNjUzMDAwMDgyfQ.loR4N1Kff6YfE_w5gNYC35EqP_s4Lqncp7wwDOWhFhw",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{host}}/api/v1/version",
					"protocol": "{{protocol}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"version"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}